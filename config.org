#+Title: My emacs config
#+Author: Dhia Dahmeni
#+Date: 2025
#+PROPERTY: header-args :tangle init.el

* Required settings
These settings are the barebones to using emacs, they also don't require any packages

#+BEGIN_SRC emacs-lisp

  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq gc-cons-threshold (* 50 1000 1000))
  (setq ring-bell-function 'ignore)
  (defun crypt/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'crypt/display-startup-time)

  ;; Silence native compiler warnings
  (setq native-comp-async-report-warnings-errors nil)

  ;; Set the right directory to store native comp cache
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

  (set-language-environment "UTF-8")

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)

  (global-auto-revert-mode t)

  (add-to-list 'exec-path "/opt/homebrew/bin")

  (setenv "PATH" (concat "/opt/homebrew/bin:" (getenv "PATH")))


  (add-to-list 'exec-path "/Users/macbook/.local/bin")

  (setenv "PATH" (concat "/Users/macbook/.local/bin" (getenv "PATH")))
#+END_SRC

* Package manager
For package management I'm using straight.el
#+BEGIN_SRC emacs-lisp 
  ;; Initialize package sources
  (setq straight-repository-branch "master")

  ;; Install straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
      	  (url-retrieve-synchronously
      	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
      	   'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Prefer built-in packages
  (dolist (pkg '(project xref eldoc flymake jsonrpc eglot))
    (straight-override-recipe `(,pkg :type built-in)))
  ;; Install use-package
  (straight-use-package 'use-package)

  ;; Configure use-package to use straight.el by default
  (use-package straight
    :custom
    (straight-use-package-by-default t))
#+END_SRC

* UI and garbage/temp file handling

#+begin_src emacs-lisp

  ;; backup and auto-save files in one single room
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backup"))))

  (use-package no-littering)

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1) ;Disable scrollb
  (tool-bar-mode -1) ; Disable toolbar
  (tooltip-mode -1) ; Disable tooltips
  (set-fringe-mode 10) ; Give some room

  (menu-bar-mode -1) ; Disable menu bar

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  pdf-view-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (set-face-attribute 'default nil :font "Hack" :height 160)

(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-gruvbox t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (nerd-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
  ;; Transperancy
  (add-to-list 'default-frame-alist '(alpha-background . 96)) ; For all new frames henceforth

  (use-package doom-modeline
    :init (doom-modeline-mode 1))

  ;; Add git  to the side
  (use-package git-gutter-fringe
    :init
    (global-git-gutter-mode t))

  (setq treesit-extra-load-path (list "~/.emacs.d/straight/build/tree-sitter-langs/bin"))
  ;; tree sitter langs for tree sitter integration
  (use-package tree-sitter-langs)

  ;; Tree sitter support
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

  ;; smart parens
  (use-package smartparens
    :init (show-smartparens-global-mode)
    :config (require 'smartparens-config))

  ;; shows possible key combinations
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  ;; File tree

#+end_src

* Terminal
best terminal around
#+begin_src emacs-lisp
(use-package vterm
  :hook (vterm-mode . (lambda () (display-line-numbers-mode 0))))

#+end_src
* Undo
Because the undo system in emacs sucks balls, i'm using undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :init (global-undo-tree-mode)
    :config
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/backup/"))))
#+end_src

* Workspaces
#+begin_src emacs-lisp
        (use-package persp-mode
          :ensure t
          :config
          (persp-mode 1)                    ; Enable persp-mode
          (setq persp-auto-save-opt 1)      ; Save perspectives on exit
          (setq persp-auto-resume-time 1)
          (global-set-key (kbd "C-c p N") 'persp-add-new))  ; Resume perspectives 1 second after startup
          
#+end_src

* Keybinds and EVIL

#+begin_src emacs-lisp

  (setq evil-want-C-u-scroll t)
  (setq evil-want-keybinding 'nil)


  (use-package evil
    :init (evil-mode 1))

  (use-package evil-commentary
    :init (evil-commentary-mode))

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

  (use-package evil-collection
    :init (evil-collection-init))

  (use-package evil-owl
    :config
    (setq evil-owl-max-string-length 200)
    (add-to-list 'display-buffer-alist
                 '("*evil-owl*"
                   (display-buffer-in-side-window)
                   (side . bottom)
                   (window-height . 0.3)))
    (evil-owl-mode))


  (use-package general
    :after which-key
    :config
    (general-override-mode 1))

  (general-create-definer tyrant-def-1
    :states '(normal visual insert motion emacs)
    :prefix "SPC"
    :non-normal-prefix "C-SPC")

  (general-evil-setup t)

  ;; Define major mode bindings for Org-mode
  (general-define-key
   :keymaps 'org-mode-map
   :states '(normal visual)
   :prefix "SPC m"
   "r r" 'org-refile) ;; SPC m r r -> refile Org entry

  (tyrant-def-1
    ""     nil
    ":"    'execute-extended-command ;; SPC : -> M-x
    "c"    (general-simulate-key "C-c")
    "h"    '(:ignore t :which-key "help") ;; Repurposed for help commands
    "x"    (general-simulate-key "C-x")
    "w"    '(:ignore t :which-key "window")
    "p"    (general-simulate-key "C-x p")
    "TAB" (general-simulate-key "C-c p")
    "SPC"  'consult-buffer
    "."    'dired-jump ;; SPC . -> create/find file in Dired
    "X"    'org-capture ;; SPC X -> org capture

    ;; Help commands
    "h k"  'describe-key ;; SPC h k -> describe key
    "h w"  'where-is ;; SPC h w -> find shortcuts
    "h v"  'describe-variable ;; SPC h v -> describe variable
    "h f"  'describe-function ;; SPC h f -> describe function
    "h b"  '(:ignore t :which-key "bindings")
    "h b b" 'which-key-show-top-level ;; SPC h b b -> list all keybindings

    ;; Files
    "f"    '(:ignore t :which-key "files")
    "ff"   'find-file
    "fS-f" 'consult-find
    "fs"   'save-buffer
    "fS-s" 'write-file
    "fD"   'delete-file ;; SPC f D -> delete current file
    "fr"   'consult-recent-file ;; SPC f r -> recent files
    "fp"   '((lambda () (interactive) (find-file "~/.emacs.d/init.el")) :which-key "private config") ;; SPC f p -> open config
    "fg"   'consult-ripgrep

    ;; Search
    "s"    '(:ignore t :which-key "search")
    "ss"   'consult-line
    "sb"   'consult-buffer
    "sp"   'project-search
    "sS-p" 'project-search
    "sd"   'consult-ripgrep
    "sS-d" 'consult-ripgrep

    ;; Quit
    "q"    '(:ignore t :which-key "quit")
    "qq"   'kill-emacs
    "wqa"  'save-buffers-kill-terminal
    "qr"   'restart-emacs
    "qz"   'delete-frame

    ;; Buffers
    "b"    '(:ignore t :which-key "buffer")
    "bb"   'consult-buffer
    "bB"   'consult-buffer ;; SPC b B -> see all buffers
    "bS-b" 'consult-buffer-other-window
    "bd"   (lambda () (interactive) (kill-this-buffer))
    "bD"   'vb/close-all-buffers
    "bq"   'kill-buffer-and-window
    "bR"   'rename-file-and-buffer
    "bx"   'scratch-buffer
    "bS-x" 'switch-to-scratch-buffer
    "bs"   'save-buffer ;; SPC b s -> save and name buffer

    ;; Window management
    "ws"   'split-window-below
    "wv"   'split-window-right
    "wd"   'delete-window
    "wh"   'evil-window-left
    "wj"   'evil-window-down
    "wk"   'evil-window-up
    "wl"   'evil-window-right
    "wS-h" 'evil-window-move-far-left
    "wS-j" 'evil-window-move-far-down
    "wS-k" 'evil-window-move-far-up
    "wS-l" 'evil-window-move-far-right
    "wC-S-h" 'evil-window-move-far-left
    "wC-S-j" 'evil-window-move-far-down
    "wC-S-k" 'evil-window-move-far-up
    "wC-S-l" 'evil-window-move-far-right
    "wu"   'winner-undo
    "wC-r" 'winner-redo
    "wo"   'enlarge-window
    "wmm"  'delete-other-windows
    "w|"   'set-window-width
    "w_"   'set-window-height
    "ww"   'other-window ;; SPC w w -> switch windows
    "wq"   'delete-window ;; SPC w q -> close window
    "w+"   'enlarge-window ;; SPC w + -> increase height
    "w-"   'shrink-window ;; SPC w - -> decrease height
    "w>"   'enlarge-window-horizontally ;; SPC w > -> increase width
    "w<"   'shrink-window-horizontally ;; SPC w < -> decrease width
    "wH"   'evil-window-move-far-left ;; SPC w H -> move window left

    ;; Open
    "o"    '(:ignore t :which-key "open")
    "oa"   'org-agenda
    "oc"   'org-capture
    "ol"   'org-store-link
    "os"   'org-schedule
    "ot"   'org-todo
    "or"   'org-refile
    "ov" 'my/new-vterm                                 ; SPC o t -> New vterm
    "oE"   'eshell ;; SPC o E -> open eshell fullscreen

    ;; Eglot/LSP
    "l"    '(:ignore t :which-key "lsp")
    "ln"   'xref-find-references
    "ld"   'xref-find-definitions
    "lh"   'eglot-help-at-point
    "ls"   'consult-eglot-symbols
    "lx"   'eglot-code-actions
    "lR"   'eglot-reconnect
    "lS"   'eglot-shutdown
    "lD"   'xref-find-definitions
    "lF"   'eglot-find-type-definition
    "lI"   'eglot-find-implementation
    "lT"   'eglot-find-type-definition
    "lU"   'xref-find-references
    "lW"   'eglot-format
    "lr"   'eglot-rename

    ;; Errors
    "e"    '(:ignore t :which-key "errors")
    "en"   'flymake-goto-next-error
    "ep"   'flymake-goto-prev-error
    "el"   'consult-flymake

    ;; Toggle
    "t"    '(:ignore t :which-key "toggle")
    "td"   'dired
    "tg"   'magit-status
    "tv"   'vterm

    ;; Magit
    "g"    '(:ignore t :which-key "git")
    "g g"  'magit-status ;; SPC g g -> magit status

    ;; Existing Magit bindings
    "v"    '(:ignore t :which-key "magit")
    "vb"   'magit-blame
    "vl"   'magit-log-buffer-file
    "vd"   'magit-diff-buffer-file
    "vc"   'magit-file-checkout
    "vs"   'magit-stage
    "vu"   'magit-unstage
    "vU"   'magit-file-untrack

    "C-c p N" 'persp-add-new  ; Prompts for name
    )

  (defun my/new-vterm ()
    "Split the window horizontally and create a new vterm buffer with an incremental name."
    (interactive)
    (split-window-below)
    (other-window 1)
    (let* ((n 1)
           (base-name "vterm")
           (buffer-name (format "%s-%d" base-name n)))
      (while (get-buffer buffer-name)
        (setq n (1+ n))
        (setq buffer-name (format "%s-%d" base-name n)))
      (vterm buffer-name)))

  ;; Additional functions
  (defun scratch-buffer ()
    "Open a global scratch buffer in a popup."
    (interactive)
    (pop-to-buffer (get-buffer-create "*scratch*")))

  (defun switch-to-scratch-buffer ()
    "Switch to global scratch buffer in current window."
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*")))

  (defun project-scratch-buffer ()
    "Open a project-local scratch buffer in a popup."
    (interactive)
    (let ((proj (project-current t)))
      (pop-to-buffer (get-buffer-create
                      (format "*scratch-%s*" (project-name proj))))))

  (defun project-switch-to-scratch-buffer ()
    "Switch to project-local scratch buffer in current window."
    (interactive)
    (let ((proj (project-current t)))
      (switch-to-buffer (get-buffer-create
                         (format "*scratch-%s*" (project-name proj))))))

  (defun set-window-width (width)
    "Set window width to WIDTH columns, with prefix argument."
    (interactive "p")
    (window-resize nil (- width (window-width)) t))

  (defun set-window-height (height)
    "Set window height to HEIGHT lines, with prefix argument."
    (interactive "p")
    (window-resize nil (- height (window-height)) nil))


  ;; cycle through errors
  (evil-global-set-key 'normal (kbd "]d") 'flycheck-next-error)
  (evil-global-set-key 'normal (kbd "[d") 'flycheck-previous-error)

  (evil-global-set-key 'normal (kbd "C-u") 'evil-scroll-up)

  ;; cycle through buffers
  (evil-global-set-key 'normal (kbd "]b") 'next-buffer)
  (evil-global-set-key 'normal (kbd "[b") 'previous-buffer)

  (evil-set-undo-system 'undo-tree)

    #+end_src

* Auto completion
For auto completion i'm using corfu, there are none better
#+begin_src emacs-lisp

  ;; Corfu with use-package
  (use-package corfu
    :ensure t  ; Automatically install from MELPA
    :init
    (global-corfu-mode)  ; Enable Corfu globally
    :bind
    (:map corfu-map
          ("TAB" . corfu-complete))  ; Complete selection with C-e
    :custom
    (corfu-auto t)               ; Enable auto-completion
    (corfu-auto-prefix 3)        ; Trigger after 3 characters
    (corfu-auto-delay 1.0)       ; Delay before showing completions
    (corfu-quit-no-match t))     ; Quit if no match

  ;; Text mode setup for ispell completion
  (defun text-mode-hook-setup ()
    "Customize completion backends for text modes."
    (make-local-variable 'completion-at-point-functions)
    (add-to-list 'completion-at-point-functions 'ispell-completion-at-point))

  ;; Apply to text-mode and org-mode
  (add-hook 'text-mode-hook 'text-mode-hook-setup)
  (add-hook 'org-mode-hook 'text-mode-hook-setup)

#+end_src

* Git integration

#+begin_src emacs-lisp
  (use-package magit)

  ;; Add git  to the side
  (use-package git-gutter-fringe
    :init
    (global-git-gutter-mode t))
#+end_src

* eshell config
#+begin_src emacs-lisp

  (defun crypt/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (setq eshell-history-size         10000
  	      eshell-buffer-maximum-lines 10000
  	      eshell-hist-ignoredups t
  	      eshell-scroll-to-bottom-on-input t))

  (use-package eshell
    :hook (eshell-first-time-mode . crypt/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)))
#+end_src

* Completion Popup
#+begin_src elisp
  (use-package vertico
    :init (vertico-mode)
    :demand t
    :bind (
  	       :map vertico-map
  	       ("C-j" . vertico-next)
  	       ("C-k" . vertico-previous))
    :config
    (setq vertico-sycle t))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
  	      completion-category-defaults nil
  	      completion-category-overrides '((file (styles partial-completion)))))

  (use-package marginalia
    :bind (
  	       :map minibuffer-local-map
  	       ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))

  (use-package consult) 
#+end_src

* Org mode config

#+begin_src elisp
  (defun crypt/org-mode-setup ()
    (org-indent-mode 1)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . crypt/org-mode-setup)
    :config
    (setq org-agenda-files '("~/org/todo.org" "~/org/journal.org"))
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-ellipsis " ▾")

    (setq org-capture-templates
          '(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/org/todo.org" "Inbox")
             "* TODO %^{TODO keyword} %?\n  SCHEDULED: %^t\n  %i\n  %a")

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/org/journal.org")
             "\n* %<%I:%M %p> - %^{Title} :journal:\n  SCHEDULED: %^t\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/org/journal.org")
             "* %^{Meeting title} :meetings:\n  SCHEDULED: %^t\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1))))

    (use-package org-bullets
      :after org
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))

    (defun crypt/org-mode-visual-fill ()
      (setq visual-fill-column-width 500
    	      visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

    (use-package visual-fill-column
      :hook (org-mode . crypt/org-mode-visual-fill))
    #+end_src

* File manager

#+begin_src elisp
  (use-package dired
    :straight (:type built-in)
    :commands (dired dired-jump)
    :config (setq insert-directory-program "gls")
    :custom ((dired-listing-switches "-agho --group-directories-first")))

  (use-package dired-single)
#+end_src

* Programming
** Diagnostics and formatting
#+begin_src elisp
  (use-package format-all
    :preface
    (defun crypt/format-code ()
      "Auto-format whole buffer."
      (interactive)
      (if (derived-mode-p 'prolog-mode)
          (prolog-indent-buffer)
        (format-all-buffer)))
    :config
    (global-set-key (kbd "M-F") #'crypt/format-code)
    (add-hook 'prog-mode-hook #'format-all-ensure-formatter))
#+end_src

** Tools  

#+begin_src elisp

  (use-package docker
  	:defer t
  	:ensure t
  	:bind ("C-c d" . docker)
  	:config
  	(setq docker-command "docker"
  			  docker-compose-command "docker-compose"
  			  docker-container-tramp-method "docker"))
#+end_src

** LSP

#+begin_src elisp
  (use-package eglot
    :straight (:type built-in)
    :ensure nil)
#+end_src

** Languages

*** Indent
#+begin_src elisp

  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
  (setq-default c-basic-offset 2)

#+end_src

*** Python
#+begin_src elisp
  (add-hook 'python-mode-hook 'eglot-ensure)  ; Python
  (add-to-list 'eglot-server-programs
               '((python-mode python-ts-mode)
                 "basedpyright-langserver" "--stdio"))

#+end_src

*** TS/JS/Web

#+begin_src elisp

  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.jsx?\\'"  . web-mode)
           ("\\.tsx?\\'"  . web-mode)
           ("\\.json\\'"  . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2) ; HTML
    (setq web-mode-css-indent-offset 2)    ; CSS
    (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))

  ;; js/ts Development
  (use-package typescript-mode
    :config
    (setq typescript-indent-level 2))

  ;; Ensure Eglot starts for TypeScript
  (add-hook 'typescript-mode-hook 'eglot-ensure)
  (add-hook 'js-mode-hook 'eglot-ensure)

  (add-hook 'typescript-mode-hook
            (lambda ()
              (setq tab-width 2)
              (setq evil-shift-width typescript-indent-level)))

#+end_src

*** Rust

#+begin_src elisp

  (use-package rust-mode)

#+end_src

*** Zig

#+begin_src elisp
  (use-package zig-mode)

#+end_src

*** YAML

#+begin_src elisp
  (use-package yaml-mode)
  (use-package yaml-pro)
#+end_src

* PDF/Markdown
#+begin_src elisp

  (custom-set-variables
   '(markdown-command "/usr/bin/pandoc"))

  (use-package pdf-tools
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    :custom
    (pdf-annot-activate-created-annotations t "automatically annotate highlights"))

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-source-correlate-start-server t)

  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)

  (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
#+end_src
* Misc
#+begin_src elisp

  (defun crypto/so-long()
    (setq-default bidi-paragraph-direction 'left-to-right)
    (setq bidi-inhibit-bpa t)
    )

  (global-so-long-mode 1)
  (add-hook 'so-long-hook #'crypto/so-long)

#+end_src


* Performance

#+begin_src elisp

  (setq read-process-output-max (* 3072 3072))
  (setq gc-cons-threshold 200000000)

#+end_src
