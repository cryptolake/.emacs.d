#+Title: My emacs config
#+Author: Dhia Dahmeni
#+Date: 2024
#+PROPERTY: header-args :tangle init.el

* Required settings
These settings are the barebones to using emacs, they also don't require any packages

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
  (setq ring-bell-function 'ignore)
  (defun crypt/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))


  (add-hook 'emacs-startup-hook #'crypt/display-startup-time)

  ;; Silence native compiler warnings
  (setq native-comp-async-report-warnings-errors nil)

  ;; Set the right directory to store native comp cache
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

  (set-language-environment "UTF-8")

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)

  (global-auto-revert-mode t)
#+END_SRC

* Package manager
For package management I'm using straight.el
#+BEGIN_SRC emacs-lisp 
  ;; Initialize package sources
  (setq straight-repository-branch "develop")

  ;; Install straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	      (url-retrieve-synchronously
  	       "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  	       'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Install use-package
  (straight-use-package 'use-package)

  ;; Configure use-package to use straight.el by default
  (use-package straight
    :custom
    (straight-use-package-by-default t))
#+END_SRC

* UI and garbage/temp file handling

#+begin_src emacs-lisp

  ;; backup and auto-save files in one single room
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backup"))))

  (use-package no-littering)

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1) ;Disable scrollb
  (tool-bar-mode -1) ; Disable toolbar
  (tooltip-mode -1) ; Disable tooltips
  (set-fringe-mode 10) ; Give some room

  (menu-bar-mode -1) ; Disable menu bar

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  pdf-view-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (set-face-attribute 'default nil :font "Hack" :height 120)

  (use-package doom-themes
    
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-tomorrow-night t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-gruvbox") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  ;; Transperancy
  (add-to-list 'default-frame-alist '(alpha-background . 96)) ; For all new frames henceforth

  (use-package doom-modeline
    :init (doom-modeline-mode 1))

  ;; Add git  to the side
  (use-package git-gutter-fringe
    :init
    (global-git-gutter-mode t))

  ;; tree sitter langs for tree sitter integration
  (use-package tree-sitter-langs)

  ;; Tree sitter support
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

  ;; smart parens
  (use-package smartparens
    :init (show-smartparens-global-mode)
    :config (require 'smartparens-config))

  ;; shows possible key combinations
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package lsp-ui)


  ;; File tree
  (use-package treemacs
    :defer t)

#+end_src

* Terminal
best terminal around
#+begin_src emacs-lisp
  (use-package vterm)

#+end_src
* Undo
Because the undo system in emacs sucks balls, i'm using undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :init (global-undo-tree-mode)
    :config
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/backup/"))))
#+end_src

* Keybinds and EVIL

#+begin_src emacs-lisp

  (setq evil-want-C-u-scroll t)
  (setq evil-want-keybinding 'nil)


  (use-package evil
    :init (evil-mode 1))

  (use-package evil-commentary
    :init (evil-commentary-mode))

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

  (use-package evil-collection
    :init (evil-collection-init))

  (use-package evil-owl
    :config
    (setq evil-owl-max-string-length 500)
    (add-to-list 'display-buffer-alist
                 '("*evil-owl*"
                   (display-buffer-in-side-window)
                   (side . bottom)
                   (window-height . 0.3)))
    (evil-owl-mode))


  (use-package general
    :after which-key
    :config
    (general-override-mode 1))


  (general-create-definer tyrant-def-1
    :states '(normal visual insert motion emacs)
    :prefix "SPC"
    :non-normal-prefix "C-SPC")

  (general-evil-setup t)
  (general-nmap
    :keymaps 'lsp-mode-map
    :predicate 'lsp-mode
    "K" 'lsp-ui-doc-show)

  (tyrant-def-1
    ""     nil
    "c"   (general-simulate-key "C-c")
    "h"   (general-simulate-key "C-h")
    "x"   (general-simulate-key "C-x")
    "w"   (general-simulate-key "C-w")
    "p"   (general-simulate-key "C-x p")
    "SPC"   'consult-buffer

    ;; searching files by consult
    "f"   '(:ignore t :which-key "files")
    "ff"  'consult-find
    ;; use ripgrep for searching
    "fg"  'consult-ripgrep

    ;; searching inside buffer
    "s"   '(:ignore t :which-key "search")
    "ss"  'consult-line
    "sb"  'consult-buffer

    ;; Package manager
    "lp"  'list-packages

    ;; Quit operations
    "q"	'(:ignore t :which-key "quit emacs")
    "qq"  'kill-emacs
    "qz"  'delete-frame

    ;; Buffer operations
    "b"   '(:ignore t :which-key "buffer")
    "bb"  'mode-line-other-buffer
    "bd"  'kill-this-buffer
    "bD"  'vb/close-all-buffers
    "bq"  'kill-buffer-and-window
    "bR"  'rename-filand-buffer

    "l"  '(:ignore t :which-key "lsp")
    "lr" 'lsp-find-references
    "ld" 'lsp-find-definition
    "lh" 'lsp-describe-session
    "ls" 'lsp-find-symbol
    "lx" 'lsp-execute-code-action
    "lR" 'lsp-restart-workspace
    "lS" 'lsp-shutdown-workspace
    "lD" 'lsp-find-declaration
    "lF" 'lsp-find-type-definition
    "lI" 'lsp-find-implementation
    "lT" 'lsp-find-type-definition
    "lU" 'lsp-find-references
    "lW" 'lsp-organize-imports

    "e" '(:ignore t :which-key "errors")
    "en" 'flycheck-next-error
    "ep" 'flycheck-previous-error
    "el" 'flycheck-list-errors

    "t" '(:ignore t :which-key "toggle")
    "tt" 'treemacs
    "td" 'dired
    "tg" 'magit-status

    "o" '(:ignore t :which-key "org")
    "oa" 'org-agenda
    "oc" 'org-capture
    "ol" 'org-store-link
    "os" 'org-schedule
    "ot" 'org-todo
    "or" 'org-refile

    ;; magit && git
    "v" '(:ignore t :which-key "magit")
    "vb" 'magit-blame
    "vl" 'magit-log-buffer-file
    "vd" 'magit-diff-buffer-file
    "vc" 'magit-file-checkout
    "vs" 'magit-stage
    "vu" 'magit-unstage
    "vU" 'magit-file-untrack
    )


  ;; cycle through errors
  (evil-global-set-key 'normal (kbd "]d") 'flycheck-next-error)
  (evil-global-set-key 'normal (kbd "[d") 'flycheck-previous-error)

  (evil-global-set-key 'normal (kbd "C-u") 'evil-scroll-up)

  ;; cycle through buffers
  (evil-global-set-key 'normal (kbd "]b") 'next-buffer)
  (evil-global-set-key 'normal (kbd "[b") 'previous-buffer)

  (evil-set-undo-system 'undo-tree)

#+end_src

* Auto completion
For auto completion i'm using company, there are none better
#+begin_src emacs-lisp

  (use-package company
    :init (global-company-mode)
    ;; (setq company-global-modes '(not org-mode))
    :bind (:map company-active-map
  	            ("C-e" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 3)
    (company-idle-delay 1.0))

  (defun text-mode-hook-setup ()
    ;; make `company-backends' local is critcal
    ;; or else, you will have completion in every major mode, that's very annoying!
    (make-local-variable 'company-backends)

    ;; company-ispell is the plugin to complete words
    (add-to-list 'company-backends 'company-ispell))

  (add-hook 'text-mode-hook 'text-mode-hook-setup)
  (add-hook 'org-mode-hook 'text-mode-hook-setup)

  (use-package company-box
  :hook (company-mode . company-box-mode))

#+end_src

* Git integration

#+begin_src emacs-lisp
  (use-package magit)

  ;; Add git  to the side
  (use-package git-gutter-fringe
    :init
    (global-git-gutter-mode t))
#+end_src

* eshell config
#+begin_src emacs-lisp

  (defun crypt/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (setq eshell-history-size         10000
  	      eshell-buffer-maximum-lines 10000
  	      eshell-hist-ignoredups t
  	      eshell-scroll-to-bottom-on-input t))

  (use-package eshell
    :hook (eshell-first-time-mode . crypt/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)))
#+end_src

* Completion Popup
#+begin_src elisp
  (use-package vertico
    :init (vertico-mode)
    :demand t
    :bind (
  	       :map vertico-map
  	       ("C-j" . vertico-next)
  	       ("C-k" . vertico-previous))
    :config
    (setq vertico-sycle t))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
  	      completion-category-defaults nil
  	      completion-category-overrides '((file (styles partial-completion)))))

  (use-package marginalia
    :bind (
  	       :map minibuffer-local-map
  	       ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))

  (use-package consult) 
#+end_src

* Org mode config

#+begin_src elisp
  (defun crypt/org-mode-setup ()
    (org-indent-mode 1)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . crypt/org-mode-setup)
    :config
    (setq org-agenda-files
  	      '("~/Documents/org/todo.org"))
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-ellipsis " ▾")

    (setq org-capture-templates
  	      `(("t" "Tasks / Projects")
  	        ("tt" "Task" entry (file+olp "~/Documents/org/todo.org" "Inbox")
  	         "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

  	        ("j" "Journal Entries")
  	        ("jj" "Journal" entry
  	         (file+olp+datetree "~/Documents/org/journal.org")
  	         "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
  	         :clock-in :clock-resume
  	         :empty-lines 1)
  	        ("jm" "Meeting" entry
  	         (file+olp+datetree "~/Documents/org/journal.org")
  	         "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
  	         :clock-in :clock-resume
  	         :empty-lines 1))))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

  (defun crypt/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
  	      visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . crypt/org-mode-visual-fill))
#+end_src

* File manager

#+begin_src elisp
  (use-package dired
    :straight (:type built-in)
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-agho --group-directories-first")))

  (use-package dired-single)
#+end_src

* Programming
** Diagnostics and formatting
I use flycheck for my error displaying need and format all to format files on demand
#+begin_src elisp
  (use-package flycheck
    :init (global-flycheck-mode))

  (use-package format-all
    :preface
    (defun crypt/format-code ()
      "Auto-format whole buffer."
      (interactive)
      (if (derived-mode-p 'prolog-mode)
          (prolog-indent-buffer)
        (format-all-buffer)))
    :config
    (global-set-key (kbd "M-F") #'crypt/format-code)
    (add-hook 'prog-mode-hook #'format-all-ensure-formatter))
#+end_src

** Tools  

#+begin_src elisp
  (use-package docker
    :defer t)
#+end_src

** LSP language servers

#+begin_src elisp
      (use-package lsp-mode
        :init
        ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
        :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
        (lsp-mode . (lambda ()
                          (let ((lsp-keymap-prefix "C-c l"))
                            (lsp-enable-which-key-integration))))       ;; if you want which-key integration
               (lsp-mode . lsp-enable-which-key-integration))
        :commands lsp
        :config
        (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
  )

#+end_src


** copilot

#+begin_src elisp
    (use-package copilot
    :straight (:host github :repo "copilot-emacs/copilot.el" :files ("dist" "*.el"))
  :hook
  (prog-mode . copilot-mode)
    :config
    
  (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
    :ensure t)

#+end_src

** Languages

*** Indent
#+begin_src elisp

  ;; tabs are evil
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
  (setq-default c-basic-offset 2)

#+end_src

*** Python
#+begin_src elisp

  (use-package lsp-pyright
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))  ; or lsp-deferred

  ;; (setq lsp-pyright-use-library-code-for-types nil) ;; set this to nil if getting too many false positive type errors
  (setq lsp-pyright-auto-import-completions nil)

  (use-package conda
    :init
    ;; if you want interactive shell support, include:
    (conda-env-initialize-interactive-shells)
    ;; if you want eshell support, include:
    (conda-env-initialize-eshell))
  (use-package ein)
#+end_src

*** TS/JS/Web

#+begin_src elisp

  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.jsx?\\'"  . web-mode)
           ("\\.tsx?\\'"  . web-mode)
           ("\\.json\\'"  . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2) ; HTML
    (setq web-mode-css-indent-offset 2)    ; CSS
    (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))

  ;; js/ts Development
  (use-package typescript-mode
    :config
    (add-hook 'web-mode-hook 'lsp))

#+end_src

*** Rust

#+begin_src elisp

  (use-package rust-mode
  :init
  (setq rust-mode-treesitter-derive t)
  :config
  (add-hook 'rust-mode-hook 'lsp)
  )

#+end_src

*** YAML

#+begin_src elisp
  (use-package yaml-mode)
  (use-package yaml-pro)
#+end_src

* PDF/Markdown
#+begin_src elisp

  (custom-set-variables
   '(markdown-command "/usr/bin/pandoc"))

    (use-package pdf-tools
      :config
      (pdf-tools-install)
      (setq-default pdf-view-display-size 'fit-width)
      (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
      :custom
      (pdf-annot-activate-created-annotations t "automatically annotate highlights"))

    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
          TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
          TeX-source-correlate-start-server t)

    (add-hook 'TeX-after-compilation-finished-functions
              #'TeX-revert-document-buffer)

    (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
#+end_src
* Misc
#+begin_src elisp

  (defun crypto/so-long()
    (setq-default bidi-paragraph-direction 'left-to-right)
    (setq bidi-inhibit-bpa t)
    )

  (global-so-long-mode 1)
  (add-hook 'so-long-hook #'crypto/so-long)

#+end_src


* Performance

#+begin_src elisp

  (setq read-process-output-max (* 3072 3072))
  (setq gc-cons-threshold 200000000)
  (setq lsp-idle-delay 0.500)

#+end_src
